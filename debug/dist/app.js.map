{"version":3,"sources":["../../app/src/app.js"],"names":["Koa","require","cors","logger","koaLogger","config","loader","mongoose","loggedInUserService","Sentry","Promise","ErrorSerializer","validate","koaBody","multipart","jsonLimit","formLimit","textLimit","app","init","dsn","environment","process","env","NODE_ENV","on","err","ctx","withScope","scope","addEventProcessor","event","Handlers","parseRequest","request","captureException","dbSecret","get","JSON","parse","mongoURL","username","password","onDbReady","error","Error","connect","use","next","then","set","inErr","e","debug","status","info","body","serializeError","message","response","type","setLoggedInUser","loadRoutes","server","listen","module","exports"],"mappings":"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","sourcesContent":["const Koa = require(\"koa\");\nconst cors = require(\"@koa/cors\");\nconst logger = require(\"logger\");\nconst koaLogger = require(\"koa-logger\");\nconst config = require(\"config\");\nconst loader = require(\"loader\");\nconst mongoose = require(\"mongoose\");\nconst loggedInUserService = require(\"services/LoggedInUserService\");\nconst Sentry = require(\"@sentry/node\");\n\nmongoose.Promise = Promise;\nconst ErrorSerializer = require(\"serializers/error.serializer\");\n\nconst validate = require(\"koa-validate\");\n\nconst koaBody = require(\"koa-body\")({\n  multipart: true,\n  jsonLimit: \"50mb\",\n  formLimit: \"50mb\",\n  textLimit: \"50mb\"\n});\n\nconst app = new Koa();\n\n/**\n * Sentry\n */\n\nSentry.init({\n  dsn: \"https://46ce74022b26498abf1f7c62837983c6@o163691.ingest.sentry.io/6262324\",\n  environment: process.env.NODE_ENV\n});\n\napp.on(\"error\", (err, ctx) => {\n  Sentry.withScope(function (scope) {\n    scope.addEventProcessor(function (event) {\n      return Sentry.Handlers.parseRequest(event, ctx.request);\n    });\n    Sentry.captureException(err);\n  });\n});\n/** */\n\nlet dbSecret = config.get(\"mongodb.secret\");\nif (typeof dbSecret === \"string\") {\n  dbSecret = JSON.parse(dbSecret);\n}\n\nconst mongoURL =\n  \"mongodb://\" +\n  `${dbSecret.username}:${dbSecret.password}` +\n  `@${config.get(\"mongodb.host\")}:${config.get(\"mongodb.port\")}` +\n  `/${config.get(\"mongodb.database\")}` +\n  \"?authSource=admin\";\n\nconst onDbReady = err => {\n  if (err) {\n    logger.error(err);\n    throw new Error(err);\n  }\n};\n\nmongoose.connect(mongoURL, onDbReady);\n\napp.use((ctx, next) => {\n  return next().then(function () {\n    ctx.set(\"Cache-Control\", \"private\");\n  });\n});\napp.use(cors());\napp.use(koaBody);\nvalidate(app);\n\napp.use(async (ctx, next) => {\n  try {\n    await next();\n  } catch (inErr) {\n    let error = inErr;\n    try {\n      error = JSON.parse(inErr);\n    } catch (e) {\n      logger.debug(\"Could not parse error message - is it JSON?: \", inErr);\n      error = inErr;\n    }\n    ctx.status = error.status || ctx.status || 500;\n    if (ctx.status >= 500) {\n      Sentry.captureException(error); // send error to sentry\n      logger.error(error);\n    } else {\n      logger.info(error);\n    }\n\n    ctx.body = ErrorSerializer.serializeError(ctx.status, error.message);\n    if (process.env.NODE_ENV === \"production\" && ctx.status === 500) {\n      ctx.body = \"Unexpected error\";\n    }\n    ctx.response.type = \"application/vnd.api+json\";\n  }\n});\n\napp.use(koaLogger());\n\napp.use(async function (ctx, next) {\n  await loggedInUserService.setLoggedInUser(ctx, logger);\n  await next();\n});\n\nloader.loadRoutes(app);\n\nconst server = app.listen(config.get(\"service.port\"), () => {\n  logger.info(\"Server started in \", config.get(\"service.port\"));\n});\n\nmodule.exports = server;\n"],"file":"app.js"}