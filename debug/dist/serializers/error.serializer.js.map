{"version":3,"sources":["../../../app/src/serializers/error.serializer.js"],"names":["ErrorSerializer","serializeValidationError","data","typeParam","keys","Object","message","source","parameter","code","replace","toLowerCase","title","detail","serializeValidationBodyErrors","errors","i","length","push","serializeError","status","module","exports"],"mappings":";;AAAA,MAAMA,eAAN,CAAsB;AACW,SAAxBC,wBAAwB,CAACC,IAAD,EAAOC,SAAP,EAAkB;AAC/C,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,IAAZ,CAAb;AACA,QAAII,OAAO,GAAG,EAAd;;AACA,YAAQH,SAAR;AACE,WAAK,MAAL;AACEG,QAAAA,OAAO,GAAG,wBAAV;AACA;;AACF,WAAK,OAAL;AACEA,QAAAA,OAAO,GAAG,yBAAV;AACA;;AACF;AACEA,QAAAA,OAAO,GAAG,EAAV;AARJ;;AAUA,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAEJ,IAAI,CAAC,CAAD;AADT,OADH;AAILK,MAAAA,IAAI,EAAEH,OAAO,CAACI,OAAR,CAAgB,IAAhB,EAAsB,GAAtB,EAA2BC,WAA3B,EAJD;AAKLC,MAAAA,KAAK,EAAEN,OALF;AAMLO,MAAAA,MAAM,EAAEX,IAAI,CAACE,IAAI,CAAC,CAAD,CAAL;AANP,KAAP;AAQD;;AAEmC,SAA7BU,6BAA6B,CAACZ,IAAD,EAAO;AACzC,UAAMa,MAAM,GAAG,EAAf;;AACA,QAAIb,IAAJ,EAAU;AACR,WAAK,IAAIc,CAAC,GAAG,CAAR,EAAW;AAAEC,QAAAA;AAAF,UAAaf,IAA7B,EAAmCc,CAAC,GAAGC,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClDD,QAAAA,MAAM,CAACG,IAAP,CAAYlB,eAAe,CAACC,wBAAhB,CAAyCC,IAAI,CAACc,CAAD,CAA7C,EAAkD,MAAlD,CAAZ;AACD;AACF;;AACD,WAAO;AACLD,MAAAA;AADK,KAAP;AAGD;;AAEoB,SAAdI,cAAc,CAACC,MAAD,EAASd,OAAT,EAAkB;AACrC,WAAO;AACLS,MAAAA,MAAM,EAAE,CACN;AACEK,QAAAA,MADF;AAEEP,QAAAA,MAAM,EAAEP;AAFV,OADM;AADH,KAAP;AAQD;;AA7CmB;;AAgDtBe,MAAM,CAACC,OAAP,GAAiBtB,eAAjB","sourcesContent":["class ErrorSerializer {\n  static serializeValidationError(data, typeParam) {\n    const keys = Object.keys(data);\n    let message = \"\";\n    switch (typeParam) {\n      case \"body\":\n        message = \"Invalid body parameter\";\n        break;\n      case \"query\":\n        message = \"Invalid query parameter\";\n        break;\n      default:\n        message = \"\";\n    }\n    return {\n      source: {\n        parameter: keys[0]\n      },\n      code: message.replace(/ /g, \"_\").toLowerCase(),\n      title: message,\n      detail: data[keys[0]]\n    };\n  }\n\n  static serializeValidationBodyErrors(data) {\n    const errors = [];\n    if (data) {\n      for (let i = 0, { length } = data; i < length; i++) {\n        errors.push(ErrorSerializer.serializeValidationError(data[i], \"body\"));\n      }\n    }\n    return {\n      errors\n    };\n  }\n\n  static serializeError(status, message) {\n    return {\n      errors: [\n        {\n          status,\n          detail: message\n        }\n      ]\n    };\n  }\n}\n\nmodule.exports = ErrorSerializer;\n"],"file":"error.serializer.js"}