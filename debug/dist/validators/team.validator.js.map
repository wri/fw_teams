{"version":3,"sources":["../../../app/src/validators/team.validator.js"],"names":["logger","require","ErrorSerializer","TeamValidator","create","ctx","next","isArrayToErrors","field","value","request","body","Array","isArray","newError","errors","info","checkBody","notEmpty","len","optional","serializeValidationBodyErrors","status","update","module","exports"],"mappings":"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","sourcesContent":["const logger = require(\"logger\");\nconst ErrorSerializer = require(\"serializers/error.serializer\");\n\nclass TeamValidator {\n  static async create(ctx, next) {\n    const isArrayToErrors = field => {\n      const value = ctx.request.body[field];\n      if (typeof value !== \"undefined\" && !Array.isArray(value)) {\n        const newError = { [field]: `${field} should be an Array.` };\n        ctx.errors = ctx.errors ? [...ctx.errors, newError] : [newError];\n      }\n    };\n    logger.info(\"Validating body for create team\");\n    ctx.checkBody(\"name\").notEmpty().len(1, 100);\n    ctx.checkBody(\"managers\").optional();\n    ctx.checkBody(\"users\").optional();\n    ctx.checkBody(\"areas\").optional();\n    ctx.checkBody(\"layers\").optional();\n    isArrayToErrors(\"managers\");\n    isArrayToErrors(\"users\");\n    isArrayToErrors(\"areas\");\n    isArrayToErrors(\"layers\");\n\n    if (ctx.errors) {\n      ctx.body = ErrorSerializer.serializeValidationBodyErrors(ctx.errors);\n      ctx.status = 400;\n      return;\n    }\n    await next();\n  }\n\n  static async update(ctx, next) {\n    const isArrayToErrors = field => {\n      const value = ctx.request.body[field];\n      if (typeof value !== \"undefined\" && !Array.isArray(value)) {\n        const newError = { [field]: `${field} should be an Array.` };\n        ctx.errors = ctx.errors ? [...ctx.errors, newError] : [newError];\n      }\n    };\n    logger.info(\"Validating body for update team\");\n    ctx.checkBody(\"name\").optional().notEmpty().len(1, 100);\n    ctx.checkBody(\"managers\").optional();\n    ctx.checkBody(\"confirmedUsers\").optional();\n    ctx.checkBody(\"users\").optional();\n    ctx.checkBody(\"areas\").optional();\n    ctx.checkBody(\"layers\").optional();\n\n    isArrayToErrors(\"managers\");\n    isArrayToErrors(\"users\");\n    isArrayToErrors(\"areas\");\n    isArrayToErrors(\"layers\");\n\n    if (ctx.errors) {\n      ctx.body = ErrorSerializer.serializeValidationBodyErrors(ctx.errors);\n      ctx.status = 400;\n      return;\n    }\n    await next();\n  }\n}\n\nmodule.exports = TeamValidator;\n"],"file":"team.validator.js"}