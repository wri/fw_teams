{"version":3,"sources":["../../app/src/loader.js"],"names":["fs","require","routersPath","__dirname","logger","mount","module","exports","loadAPI","app","path","pathApi","routesFiles","readdirSync","existIndexRouter","forEach","file","newPath","stat","statSync","isDirectory","lastIndexOf","debug","use","middleware","newPathAPI","loadRoutes"],"mappings":";;AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMC,WAAW,GAAI,GAAEC,SAAU,SAAjC;;AACA,MAAMC,MAAM,GAAGH,OAAO,YAAtB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,CAAC,MAAM;AACtB,QAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,KAAwB;AACtC,UAAMC,WAAW,GAAGZ,EAAE,CAACa,WAAH,CAAeH,IAAf,CAApB;AACA,QAAII,gBAAgB,GAAG,KAAvB;AACAF,IAAAA,WAAW,CAACG,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,YAAMC,OAAO,GAAGP,IAAI,GAAI,GAAEA,IAAK,IAAGM,IAAK,EAAnB,GAAuBA,IAA3C;AACA,YAAME,IAAI,GAAGlB,EAAE,CAACmB,QAAH,CAAYF,OAAZ,CAAb;;AACA,UAAI,CAACC,IAAI,CAACE,WAAL,EAAL,EAAyB;AACvB,YAAIJ,IAAI,CAACK,WAAL,CAAiB,YAAjB,MAAmC,CAAC,CAAxC,EAA2C;AACzC,cAAIL,IAAI,KAAK,iBAAb,EAAgC;AAC9BF,YAAAA,gBAAgB,GAAG,IAAnB;AACD,WAFD,MAEO;AACLV,YAAAA,MAAM,CAACkB,KAAP,CAAa,8BAAb,EAA6CL,OAA7C,EAAsDN,OAAtD;;AACA,gBAAIA,OAAJ,EAAa;AACXF,cAAAA,GAAG,CAACc,GAAJ,CAAQlB,KAAK,CAACM,OAAD,EAAUV,OAAO,CAACgB,OAAD,CAAP,CAAiBO,UAAjB,EAAV,CAAb;AACD,aAFD,MAEO;AACLf,cAAAA,GAAG,CAACc,GAAJ,CAAQtB,OAAO,CAACgB,OAAD,CAAP,CAAiBO,UAAjB,EAAR;AACD;AACF;AACF;AACF,OAbD,MAaO;AACL;AACA,cAAMC,UAAU,GAAGd,OAAO,GAAI,GAAEA,OAAQ,IAAGK,IAAK,EAAtB,GAA2B,IAAGA,IAAK,EAA7D;AACAR,QAAAA,OAAO,CAACC,GAAD,EAAMQ,OAAN,EAAeQ,UAAf,CAAP;AACD;AACF,KArBD;;AAsBA,QAAIX,gBAAJ,EAAsB;AACpB;AACA,YAAMG,OAAO,GAAGP,IAAI,GAAI,GAAEA,IAAK,iBAAX,GAA8B,gBAAlD;AACAN,MAAAA,MAAM,CAACkB,KAAP,CAAa,8BAAb,EAA6CL,OAA7C,EAAsDN,OAAtD;;AACA,UAAIA,OAAJ,EAAa;AACXF,QAAAA,GAAG,CAACc,GAAJ,CAAQlB,KAAK,CAACM,OAAD,EAAUV,OAAO,CAACgB,OAAD,CAAP,CAAiBO,UAAjB,EAAV,CAAb;AACD,OAFD,MAEO;AACLf,QAAAA,GAAG,CAACc,GAAJ,CAAQtB,OAAO,CAACgB,OAAD,CAAP,CAAiBO,UAAjB,EAAR;AACD;AACF;AACF,GAnCD;;AAqCA,QAAME,UAAU,GAAGjB,GAAG,IAAI;AACxBL,IAAAA,MAAM,CAACkB,KAAP,CAAa,mBAAb;AACAd,IAAAA,OAAO,CAACC,GAAD,EAAMP,WAAN,CAAP;AACAE,IAAAA,MAAM,CAACkB,KAAP,CAAa,0BAAb;AACD,GAJD;;AAMA,SAAO;AACLI,IAAAA;AADK,GAAP;AAGD,CA/CgB,GAAjB","sourcesContent":["const fs = require(\"fs\");\n\nconst routersPath = `${__dirname}/routes`;\nconst logger = require(\"logger\");\nconst mount = require(\"koa-mount\");\n\n/**\n * Load routers\n */\nmodule.exports = (() => {\n  const loadAPI = (app, path, pathApi) => {\n    const routesFiles = fs.readdirSync(path);\n    let existIndexRouter = false;\n    routesFiles.forEach(file => {\n      const newPath = path ? `${path}/${file}` : file;\n      const stat = fs.statSync(newPath);\n      if (!stat.isDirectory()) {\n        if (file.lastIndexOf(\".router.js\") !== -1) {\n          if (file === \"index.router.js\") {\n            existIndexRouter = true;\n          } else {\n            logger.debug(\"Loading route %s, in path %s\", newPath, pathApi);\n            if (pathApi) {\n              app.use(mount(pathApi, require(newPath).middleware()));\n            } else {\n              app.use(require(newPath).middleware());\n            }\n          }\n        }\n      } else {\n        // is folder\n        const newPathAPI = pathApi ? `${pathApi}/${file}` : `/${file}`;\n        loadAPI(app, newPath, newPathAPI);\n      }\n    });\n    if (existIndexRouter) {\n      // load indexRouter when finish other Router\n      const newPath = path ? `${path}/indexRouter.js` : \"indexRouter.js\";\n      logger.debug(\"Loading route %s, in path %s\", newPath, pathApi);\n      if (pathApi) {\n        app.use(mount(pathApi, require(newPath).middleware()));\n      } else {\n        app.use(require(newPath).middleware());\n      }\n    }\n  };\n\n  const loadRoutes = app => {\n    logger.debug(\"Loading routes...\");\n    loadAPI(app, routersPath);\n    logger.debug(\"Loaded routes correctly!\");\n  };\n\n  return {\n    loadRoutes\n  };\n})();\n"],"file":"loader.js"}