{"version":3,"sources":["../../app/src/loader.js"],"names":["fs","require","routersPath","__dirname","logger","mount","requireESModuleDefault","path","module","__esModule","default","exports","loadAPI","app","pathApi","routesFiles","readdirSync","existIndexRouter","forEach","file","newPath","stat","statSync","isDirectory","endsWith","debug","use","middleware","newPathAPI","loadRoutes"],"mappings":"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","sourcesContent":["const fs = require(\"fs\");\n\nconst routersPath = `${__dirname}/routes`;\nconst logger = require(\"logger\");\nconst mount = require(\"koa-mount\");\n\nconst requireESModuleDefault = path => {\n  const module = require(path);\n  return module.__esModule ? module.default : module;\n};\n\n/**\n * Load routers\n */\nmodule.exports = (() => {\n  const loadAPI = (app, path, pathApi) => {\n    const routesFiles = fs.readdirSync(path);\n    let existIndexRouter = false;\n    routesFiles.forEach(file => {\n      const newPath = path ? `${path}/${file}` : file;\n      const stat = fs.statSync(newPath);\n      if (!stat.isDirectory()) {\n        if (file.endsWith(\".router.js\") || file.endsWith(\".router.ts\")) {\n          if (file === \"index.router.js\" || file === \"index.router.ts\") {\n            existIndexRouter = true;\n          } else {\n            logger.debug(\"Loading route %s, in path %s\", newPath, pathApi);\n            if (pathApi) {\n              app.use(mount(pathApi, requireESModuleDefault(newPath).middleware()));\n            } else {\n              app.use(requireESModuleDefault(newPath).middleware());\n            }\n          }\n        }\n      } else {\n        // is folder\n        const newPathAPI = pathApi ? `${pathApi}/${file}` : `/${file}`;\n        loadAPI(app, newPath, newPathAPI);\n      }\n    });\n    if (existIndexRouter) {\n      // load indexRouter when finish other Router\n      const newPath = path ? `${path}/index.router` : \"index.router\";\n      logger.debug(\"Loading route %s, in path %s\", newPath, pathApi);\n      if (pathApi) {\n        app.use(mount(pathApi, requireESModuleDefault(newPath).middleware()));\n      } else {\n        app.use(requireESModuleDefault(newPath).middleware());\n      }\n    }\n  };\n\n  const loadRoutes = app => {\n    logger.debug(\"Loading routes...\");\n    loadAPI(app, routersPath);\n    logger.debug(\"Loaded routes correctly!\");\n  };\n\n  return {\n    loadRoutes\n  };\n})();\n"],"file":"loader.js"}