{"version":3,"sources":["../../../app/src/services/LoggedInUserService.js"],"names":["axios","require","response_error","config","LoggedInUserService","setLoggedInUser","ctx","logger","getLoggedUser","getLoggedUserError","ResponseError","response","status","statusCode","body","error","throw","toString","_a","debug","request","header","authorization","token","baseURL","get","getUserDetailsRequestConfig","method","url","headers","default","includes","toUpperCase","query","loggedUser","JSON","stringify","data","err","module","exports"],"mappings":"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","sourcesContent":["const axios = require(\"axios\");\n// eslint-disable-next-line camelcase\nconst response_error = require(\"../responses/response.error\");\nrequire(\"logger\");\nconst config = require(\"config\");\n\nclass LoggedInUserService {\n  async setLoggedInUser(ctx, logger) {\n    try {\n      await this.getLoggedUser(ctx, logger);\n    } catch (getLoggedUserError) {\n      if (getLoggedUserError instanceof response_error.ResponseError) {\n        ctx.response.status = getLoggedUserError.statusCode;\n        ctx.response.body = getLoggedUserError.error;\n      } else {\n        ctx.throw(500, `Error loading user info from token - ${getLoggedUserError.toString()}`);\n      }\n    }\n  }\n\n  async getLoggedUser(ctx, logger) {\n    // eslint-disable-next-line no-underscore-dangle\n    let _a;\n    logger.debug(\"[getLoggedUser] Obtaining loggedUser for token\");\n    if (!ctx.request.header.authorization) {\n      logger.debug(\"[getLoggedUser] No authorization header found, returning\");\n      return;\n    }\n    try {\n      this.token = ctx.request.header.authorization;\n      const baseURL = config.get(\"controlTower.url\");\n      const getUserDetailsRequestConfig = {\n        method: \"GET\",\n        baseURL,\n        url: `/auth/user/me`,\n        headers: {\n          authorization: ctx.request.header.authorization\n        }\n      };\n      const response = await axios.default(getUserDetailsRequestConfig);\n      logger.debug(\"[getLoggedUser] Retrieved token data, response status:\", response.status);\n      if ([\"GET\", \"DELETE\"].includes(ctx.request.method.toUpperCase())) {\n        ctx.request.query = { ...ctx.request.query, loggedUser: JSON.stringify(response.data) };\n      } else if ([\"POST\", \"PATCH\", \"PUT\"].includes(ctx.request.method.toUpperCase())) {\n        ctx.request.body.loggedUser = response.data;\n        ctx.request.body.token = ctx.request.header.authorization;\n      }\n    } catch (err) {\n      logger.error(\"Error getting user data\", err);\n      // eslint-disable-next-line no-cond-assign,no-void\n      if ((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data) {\n        throw new response_error.ResponseError(err.response.status, err.response.data, err.response);\n      }\n      throw err;\n    }\n  }\n}\n\nmodule.exports = new LoggedInUserService();\n"],"file":"LoggedInUserService.js"}