{"version":3,"sources":["../../../app/src/services/team.service.js"],"names":["logger","require","JWT","config","MailService","UserService","TeamModel","TeamService","verifyToken","token","verify","get","e","info","generateToken","email","teamId","sign","sendNotifications","users","team","locale","forEach","generatedToken","id","link","invitationMailId","sendMail","address","sendManagerConfirmation","confirmedUserEmail","managers","manager","joinedMailId","managerEmail","getEmailById","deleteConfirmedUserFromPreviousTeams","userId","userTeam","findOne","confirmedUsers","filter","user","save","module","exports"],"mappings":"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","sourcesContent":["const logger = require(\"logger\");\nconst JWT = require(\"jsonwebtoken\");\nconst config = require(\"config\");\nconst MailService = require(\"services/MailService\");\nconst UserService = require(\"services/user.service\");\nconst TeamModel = require(\"models/team.model\");\n\nclass TeamService {\n  // eslint-disable-next-line consistent-return\n  static verifyToken(token) {\n    try {\n      return JWT.verify(token, config.get(\"jwt.token\"));\n    } catch (e) {\n      logger.info(`Generated token ${e}`);\n    }\n  }\n\n  static generateToken(email, teamId) {\n    const token = JWT.sign({ email, teamId }, config.get(\"jwt.token\"), {});\n    logger.info(`Generated token ${token}`);\n    return token;\n  }\n\n  static sendNotifications(users = [], team, locale) {\n    users.forEach(async email => {\n      const generatedToken = this.generateToken(email, team.id);\n      const link = `${config.get(\"application.url\")}/login?callbackUrl=${config.get(\n        \"application.url\"\n      )}/settings?confirmToken=${generatedToken}&confirmToken=${generatedToken}`;\n\n      logger.info(`Sent team invitation to: ${email}`);\n      const invitationMailId = `team-invitation-${locale || \"en\"}`;\n      MailService.sendMail(invitationMailId, { link }, [{ address: { email } }]);\n    });\n  }\n\n  static sendManagerConfirmation(confirmedUserEmail, managers, locale) {\n    managers.forEach(async manager => {\n      const joinedMailId = `team-joined-${locale || \"en\"}`;\n      const managerEmail = manager.email || (await UserService.getEmailById(manager.id));\n      MailService.sendMail(joinedMailId, { email: confirmedUserEmail }, [{ address: { managerEmail } }]);\n    });\n  }\n\n  static async deleteConfirmedUserFromPreviousTeams(userId) {\n    const userTeam = await TeamModel.findOne({ confirmedUsers: userId });\n    logger.info(`User was in ${userTeam}`);\n    userTeam.confirmedUsers = userTeam.confirmedUsers.filter(user => user !== userId);\n    await userTeam.save();\n    logger.info(`User is not in ${userTeam}`);\n  }\n}\n\nmodule.exports = TeamService;\n"],"file":"team.service.js"}